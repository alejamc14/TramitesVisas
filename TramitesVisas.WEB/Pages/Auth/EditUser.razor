@page "/EditUser"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService
@inject AuthenticationStateProvider GetAuthenticationStateAsync

@if (user is null)
{
    <div class="spinner" />
}
else
{
    <EditForm Model="user" OnValidSubmit="SaveUserAsync">
        <DataAnnotationsValidator />

        <div class="card">
            <div class="card-header">
                <span>
                    <i class="oi oi-person" /> Editar Usuario 

                    <a class="btn btn-sm btn-success float-end" href="/"><i class="oi oi-arrow-thick-left" /> Regresar</a>
                  
                    <a class="btn btn-sm btn-secondary float-end" href="/changePassword"><i class="oi oi-key" /> Cambiar Contraseña</a>
                    
                    <button class="btn btn-sm btn-primary float-end mx-2" type="submit"><i class="oi oi-check" /> Guardar Cambios</button>

                    
                </span>

            </div>
            <div class="card-body">

                <div class="row">
                    <div class="col-6">
                        <div class="mb-3">
                            <label>Nombres:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="user.FirstName" />
                                <ValidationMessage For="@(() => user.FirstName)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Apellidos:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="user.LastName" />
                                <ValidationMessage For="@(() => user.LastName)" />
                            </div>
                        </div>

                        <div class="mb-3">
                            <label>Teléfono:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="user.PhoneNumber" />
                                <ValidationMessage For="@(() => user.PhoneNumber)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Nacionalidad:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="user.Nacionalidad" />
                                <ValidationMessage For="@(() => user.Nacionalidad)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Dirección:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="user.Address" />
                                <ValidationMessage For="@(() => user.Address)" />
                            </div>
                        </div>
                        <div class="mb-3">
                    <InputImg Label="Foto" ImageSelected="ImageSelected" ImageURL="@imageUrl" />
                    </div>
                    </div>


                </div>

            </div>
        </div>

    </EditForm>
}

@code {
    private User user;
    private Persona persona;

    private string imageUrl;

    protected override async Task OnInitializedAsync()
    {

        await LoadUserAsyc();

        if (!string.IsNullOrEmpty(user!.Photo))
        {
            imageUrl = user.Photo;
            user.Photo = null;
        }
    }



    private async Task LoadUserAsyc()
    {


        var responseHTTP = await repository.GetAsync<User>($"/api/accounts");
        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
                return;
            }

            var messageError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            return;
        }
        user = responseHTTP.Response;
    }



    private void ImageSelected(string imagenBase64)
    {
        user!.Photo = imagenBase64;
        imageUrl = null;
    }


    private async Task SaveUserAsync()
    {

        //await  Personaasync();
        var responseHttp = await repository.Put<User, TokenDTO>("/api/accounts", user);
        if (responseHttp.Error)
        {     var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;           
        }        
        await loginService.LoginAsync(responseHttp.Response!.Token);
        navigationManager.NavigateTo("/");
    }

   /* private async Task Personaasync()
    {
        persona =( new Persona
        {
        Nombre=user.FirstName    
        });
        var responseHttp2 = await repository.PutAsync<Persona>("/api/personas", persona);
        if (responseHttp2.Error)
        {
            var message = await responseHttp2.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
     
    }*/

    
}

