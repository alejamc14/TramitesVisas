@page "/Register"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService

<EditForm Model="userDTO" OnValidSubmit="CreteUserAsync">
    <DataAnnotationsValidator />
    <div class="card mx-auto my-5" style="max-width:900px;">
        <div class="card-header text-center">
             <h3><i class="bi bi-person"></i> Registrar Persona</h3>
        </div> 

        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <div class="form-floating mb-3">
                        <InputText class="form-control" id="floatingInput1" placeholder="Primer Nombre" @bind-Value="@userDTO.FirstName" />
                        <label for="floatingInput1">Primer Nombre:</label>
                        <ValidationMessage For="@(() => userDTO.FirstName)" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText class="form-control" id="floatingInput2" placeholder="Apellido" @bind-Value="@userDTO.LastName" />
                        <label for="floatingInput2">Apellido:</label>
                        <ValidationMessage For="@(() => userDTO.LastName)" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText class="form-control" id="floatingInput3" placeholder="Número de Identificación" @bind-Value="@userDTO.Document" />
                        <label for="floatingInput3">Número de Identificación:</label>
                        <ValidationMessage For="@(() => userDTO.Document)" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputNumber class="form-control" id="floatingInput4" placeholder="Número de Teléfono" @bind-Value="@userDTO.Telefono" />
                        <label for="floatingInput4">Número de Teléfono:</label>
                        <ValidationMessage For="@(() => userDTO.Telefono)" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText class="form-control" id="floatingInput5" placeholder="Direccion" @bind-Value="@userDTO.Address" />
                        <label for="floatingInput5">Dirección:</label>
                        <ValidationMessage For="@(() => userDTO.Address)" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText class="form-control"  placeholder="Nacionalidad" @bind-Value="@userDTO.Nacionalidad" />
                        <label for="floatingInput5">Nacionalidad:</label>
                        <ValidationMessage For="@(() => userDTO.Nacionalidad)" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating mb-3">
                        <InputDate type="email" class="form-control" id="floatingInput6" placeholder="Fecha Nacimiento" @bind-Value="@userDTO.FechaNacimiento" />
                        <label for="floatingInput6">Fecha Nacimiento:</label>
                        <ValidationMessage For="@(() => userDTO.FechaNacimiento)" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="email" class="form-control"  placeholder="Correo Electrónico" @bind-Value="@userDTO.Email" />
                        <label for="floatingInput6">Correo Electrónico:</label>
                        <ValidationMessage For="@(() => userDTO.Email)" />
                    </div>
                 
                    <div class="form-floating mb-3">
                        <InputText type="password" class="form-control" id="floatingInput7" placeholder="Contraseña" @bind-Value="@userDTO.Password" />
                        <label for="floatingInput7">Contraseña:</label>
                        <ValidationMessage For="@(() => userDTO.Password)" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" class="form-control" id="floatingInput8" placeholder="Confirmación de Contraseña" @bind-Value="@userDTO.PasswordConfirm" />
                        <label for="floatingInput8">Confirmación de Contraseña:</label>
                        <ValidationMessage For="@(() => userDTO.PasswordConfirm)" />
                    </div>

                    <div class="mb-3">
                        <InputImg Label="Foto" ImageSelected="ImageSelected" ImageURL="@imageUrl" />
                    </div>

                 @*    <div class="mb-3">
                        <label for="photoInput">Foto:</label>
                        <InputFile id="photoInput" OnChange="HandleSelected" />
                        <img src="@userDTO.Photo" class="img-thumbnail mt-2" style="max-width: 150px;" alt="Foto de perfil" />
                        <ValidationMessage For="@(() => userDTO.Photo)" />
                    </div> *@
                </div>
            </div>
            <div class="text-center mt-3">
                <button class="btn btn-dark" type="submit">Enviar Registro</button>
            </div>
        </div>
    </div>

</EditForm>

@code {
    private UserDTO userDTO = new();

    private string? imageUrl;

    private List<UserType> TraderTypes;
    private User Users = new();


    // private async Task Charging()
    // {
    //     var responseHTTP = await repository.GetAsync<List<UserType>>("/api/TraderTypes/combo");
    //     TraderTypes = responseHTTP.Response!;
    // }

    // protected override async Task OnInitializedAsync()
    // {
    //     await Charging();
    //     if (!string.IsNullOrEmpty(userDTO.Photo))
    //     {
    //         imageUrl = userDTO.Photo;
    //         userDTO.Photo = null;
    //     }
    // }


    private async Task CreteUserAsync()
    {
        userDTO.UserName = userDTO.Email;
        userDTO.UserType = UserType.User;
        var responseHttp = await repository.PostAsync<UserDTO, TokenDTO>("/api/accounts/CreateUser", userDTO);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await loginService.LoginAsync(responseHttp.Response!.Token);
        navigationManager.NavigateTo("/");
    }


    private void ImageSelected(string imagenBase64)
    {
        userDTO.Photo = imagenBase64;
        imageUrl = null;
    }

    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);

        // Convert buffer to Base64 and assign it to the Photo property of userDTO
        userDTO.Photo = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
    }
}


