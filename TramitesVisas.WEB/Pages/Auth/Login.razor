@page "/Login"
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService
@inject IRepository Repository

<EditForm Model="loginDTO" OnValidSubmit="LoginAsync">
    <DataAnnotationsValidator />

    <div class="card mx-auto my-5" style="max-width: 400px;">
        <div class="card-header text-center">
            <h3><i class="bi bi-person"></i> Iniciar Sesion</h3>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <div class="form-floating">
                    <InputText type="email" class="form-control" id="floatingInput" placeholder="name@example.com" @bind-Value="@loginDTO.Email" />
                    <label for="floatingInput">Correo Electronico</label>
                </div>
            </div>
            <div class="mb-3">
                <div class="form-floating">
                    <InputText type="password" class="form-control" id="floatingPassword" placeholder="Password" @bind-Value="@loginDTO.Password" />
                    <label for="floatingPassword">Contraseña</label>
                </div>
            </div>
            <button class="btn btn-dark w-100" type="submit">Iniciar Sesión</button>
        </div>
    </div>
</EditForm>

@code {
    private LoginDTO loginDTO = new();

    private async Task LoginAsync()
    {
        var responseHttp = await Repository.PostAsync<LoginDTO, TokenDTO>("/api/accounts/Login", loginDTO);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await loginService.LoginAsync(responseHttp.Response!.Token);
        navigationManager.NavigateTo("/");
    }
}
