@page "/solicitudesUser/{documento}"
@using CurrieTechnologies.Razor.SweetAlert2
@using TramitesVisas.Shared.Entidades
@using TramitesVisas.WEB.Repositories
@using TramitesVisas.WEB.Shared
@inject IRepository Repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<h3>SolicitudesIndex</h3>

<div class="card">
    <div class="card-header">
        <span>
            <a class="btn btn-primary btn-sm float-start" href="/solicitud/create"><i class="bi bi-plus-circle" /> Nueva Solicitud </a>

        </span>
    </div>
    <div class="card-body">
        <GenericList MyList="Solicitudes">

            <Body>
                <table class="table table-striped">
                    <thead>
                        <tr>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <b>Id</b>
                            </td>
                            <td>
                                <b>Tipo Solicitud</b>
                            </td>
                            <td>
                                <b>Estado</b>
                            </td>
                            <td>
                                <b>Fecha de la Solicitud</b>
                            </td>
                            <td>
                                <b>Comentario</b>
                            </td>
                            <td>
                                <b>Nombre de la Persona</b>
                            </td>
                            <td>
                                <b>Tipo de visa</b>
                            </td>
                        </tr>
                        @foreach (var solicitud in Solicitudes!)
                        {
                            NomPersona(@solicitud.PersonaId);
                            TipVisa(@solicitud.TipoVisaId);
                            <tr>
                                <td>
                                    @solicitud.Id
                                </td>
                                <td>
                                    @solicitud.TipoSolicitud
                                </td>
                                <td>
                                    @solicitud.Estado
                                </td>
                                <td>
                                    @solicitud.FechaSolicitud
                                </td>
                                <td>
                                    @solicitud.Comentario
                                </td>
                                <td>
                                    @nompersona
                                </td>
                                <td>
                                    @tipvisa
                                </td>
                                <AuthorizeView Roles="Admin">
                                    <Authorized>
                                        <td>
                                            <a href="/solicitudes/edit/@solicitud.Id" class="btn btn-warning"><i class="bi bi-pencil-square"></i>Editar</a>
                                            <button class="btn btn-danger" @onclick=@(() => Delete(solicitud))><i class="bi bi-trash3"></i>Borrar</button>
                                        </td>
                                    </Authorized>
                                </AuthorizeView>
                            </tr>
                        }
                    </tbody>
                </table>

            </Body>

        </GenericList>
    </div>
</div>

@code {

    public string nompersona { get; set; }

    public string tipvisa { get; set; }

    [Parameter]

    public string documento { get; set; }

    public List<Solicitud> Solicitudes { get; set; }
    public List<Persona> Personas { get; set; }
    public List<TipoVisa> TipoVisas { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await Charging();
    }

    private async Task Charging()
    {

        var response4HTTP = await Repository.GetAsync<Persona>($"/api/personas/user/{documento}");
        var id = response4HTTP.Response.Id;

        var responseHTTP = await Repository.GetAsync<List<Solicitud>>($"/api/solicitudes/Persona/{id}");
        Solicitudes = responseHTTP.Response!;

        var response2HTTP = await Repository.GetAsync<List<Persona>>("/api/personas");
        Personas = response2HTTP.Response!;

        var response3HTTP = await Repository.GetAsync<List<TipoVisa>>("/api/tipovisas");
        TipoVisas = response3HTTP.Response!;

    }


    private async Task Delete(Solicitud solicitud)
    {

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Realmente deseas eliminar la Solicitud: {solicitud.Id}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHTTP = await Repository.DeleteAsync($"/api/solicitudes/{solicitud.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/solicitudes");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Charging();

            var toast = sweetAlertService.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    ShowConfirmButton = true,
                    Timer = 3000,
                    Position = SweetAlertPosition.BottomEnd
                });
            toast.FireAsync(icon: SweetAlertIcon.Success, message: "Solicitud borrado con éxito.");
        }
    }
    private void NomPersona(int? selection)
    {
        nompersona = "";
        foreach (var persona in Personas!)
        {
            if (selection == persona.Id)
            {
                nompersona = persona.Nombre;
            }

        }
    }

    private void TipVisa(int? selection2)
    {
        tipvisa = "";
        foreach (var tipovisa in TipoVisas!)
        {
            if (selection2 == tipovisa.Id)
            {
                tipvisa = tipovisa.Tipo;
            }

        }
    }


}