@page "/solicitud/create"
@using System.Security.Claims
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<h3>Crea Solicitud</h3>

<AuthorizeView>
    @{
        autstate = context; 
    }
    <SolicitudesForm Solicitud="solicitud" OnValidSubmit="Create" ReturnAction="Return" />
</AuthorizeView>

@code {
    private Solicitud solicitud = new();
    private AuthenticationState autstate; 
    
    private async Task Create()
    {
        var responseHttp = await repository.PostAsync("/api/solicitudes", solicitud);

        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
        }
        else
            Return();
        {
            var Toast = sweetAlertService.Mixin(new SweetAlertOptions
                {

                    Toast = true,
                    Position = SweetAlertPosition.BottomEnd,
                    ShowConfirmButton = true,
                    Timer = 3000

                });

            await Toast.FireAsync(icon: SweetAlertIcon.Success, message: "Solicitud creada con exito");
        }

    }


    private void Return()
    {
        var Role = autstate.User.Claims.FirstOrDefault(x => x.Type.Equals(ClaimTypes.Role))!.Value;

        if (Role.Equals(UserType.Admin.ToString()))
        {
            navigationManager.NavigateTo("/solicitudes");
        }
        else if (Role.Equals(UserType.User.ToString()))
        {
            var documento = autstate.User.Claims.FirstOrDefault(x => x.Type.Equals("Document"))!.Value;
            navigationManager.NavigateTo($"/solicitudesUser/{documento}");
        }

    }
}
