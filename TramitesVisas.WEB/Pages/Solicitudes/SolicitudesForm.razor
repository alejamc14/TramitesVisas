@using CurrieTechnologies.Razor.SweetAlert2
﻿@using TramitesVisas.Shared.Entidades
@using TramitesVisas.WEB.Repositories
@inject IRepository Repository
@inject SweetAlertService swal

<EditForm Model="Solicitud" OnValidSubmit="OnValidSubmit">

    <DataAnnotationsValidator/>
    <div class="mb-3">
        <label>TipoSolicitud</label>
        <div>
            <InputSelect @bind-Value="@Solicitud.TipoSolicitud">
                <option value="">Selecciona una opción</option>
                <option value="Revocacion">Revocación</option>
                <option value="Visa Nueva">Visa Nueva</option>
            </InputSelect>
            <ValidationMessage For="@(() => @Solicitud.TipoSolicitud)" />
        </div>

        <label>Fecha de Solicitud</label>
        <div>
            <InputDate width="10" @bind-Value="@Solicitud.FechaSolicitud"></InputDate>
            <ValidationMessage For="@(() => @Solicitud.FechaSolicitud)" />
        </div>
@*         <div>
            <label>Nombre de Persona</label>

            <Dropdown TItem="int" OnSelected="@OnSelected">
                <InitialTip>Escoja un Nombre</InitialTip>
                <ChildContent>
                    @foreach (var persona in Personas!)
                    {
                        <DropdownListItem Context="dropContext" Item="@persona.Id">@persona.Nombre</DropdownListItem>
                    }
                </ChildContent>
            </Dropdown>
        </div> *@

        <div>
            <label>Tipo visa</label>

            <Dropdown TItem="int" OnSelected="@OnSelected2">
                <InitialTip>Escoja un Tipo de Visa</InitialTip>
                <ChildContent>
                    @foreach (var tipovisa in TipoVisas!)
                    {
                        <DropdownListItem Context="dropContext" Item="@tipovisa.Id">@tipovisa.Tipo</DropdownListItem>
                    }
                </ChildContent>
            </Dropdown>

        </div>
            <label>Comentarios</label>
        <div>
            <InputText width="10" @bind-Value="@Solicitud.Comentario"></InputText>
            <ValidationMessage For="@(() => @Solicitud.Comentario)" />
        </div>
    </div>
        <button class="btn btn-primary" type="submit">Guardar <i class="bi bi-floppy2"></i></button>
        <button class="btn btn-info" type="reset">Limpiar <i class="bi bi-x-octagon"></i></button>
        <button class="btn btn-secondary" @onclick="ReturnAction">Regresar <i class="bi bi-arrow-clockwise"></i></button>

</EditForm>

@code {

    public List<Persona> Personas { get; set; }
    public List<TipoVisa> TipoVisas { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await Charging();
    }

    private async Task Charging()
    {

        var responseHTTP = await Repository.GetAsync<List<Persona>>("/api/personas");
        Personas = responseHTTP.Response!;

        var response2HTTP = await Repository.GetAsync<List<TipoVisa>>("/api/tipoVisas");
        TipoVisas = response2HTTP.Response!;

    }

    private EditContext editContext = null;
    protected override void OnInitialized()
    {
        editContext = new(Solicitud);
    }

    [EditorRequired]
    [Parameter]
    public Solicitud Solicitud { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }


    private void OnSelected(int selection)
    {
        Solicitud.PersonaId = selection;
    }

    private void OnSelected2(int selection2)
    {
        Solicitud.TipoVisaId = selection2;
    }

    public bool FormPostedSuccessfully { get; set; } = false;

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formularioFueEditado = editContext.IsModified();

        if (!formularioFueEditado)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var resultado = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });

        var confirmado = !string.IsNullOrEmpty(resultado.Value);

        if (confirmado)
        {
            return;
        }

        context.PreventNavigation();
    }
}
