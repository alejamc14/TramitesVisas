@using CurrieTechnologies.Razor.SweetAlert2
﻿@using TramitesVisas.Shared.Entidades
@using TramitesVisas.WEB.Repositories
@inject SweetAlertService swal

<EditForm Model="Solicitud" OnValidSubmit="OnValidSubmit">

    <DataAnnotationsValidator />
    <div class="mb-3">
        <label>TipoSolicitud</label>
        <div>
            <InputSelect @bind-Value="@Solicitud.TipoSolicitud">
                <option value="">Selecciona una opción</option>
                <option value="Revocacion">Revocación</option>
                <option value="Visa">Visa</option>
            </InputSelect>
            <ValidationMessage For="@(() => @Solicitud.TipoSolicitud)" />
        </div>
        <label>Estado</label>
        <div>
            <InputText width="10" @bind-Value="@Solicitud.Estado"></InputText>
            <ValidationMessage For="@(() => @Solicitud.Estado)" />
        </div>
        <label>Fecha de Solicitud</label>
        <div>
            <InputDate width="10" @bind-Value="@Solicitud.FechaSolicitud"></InputDate>
            <ValidationMessage For="@(() => @Solicitud.FechaSolicitud)" />
        </div>
        <label>Comentarios</label>
        <div>
            <InputText width="10" @bind-Value="@Solicitud.Comentario"></InputText>
            <ValidationMessage For="@(() => @Solicitud.Comentario)" />
        </div>
@*         <label>Id Persona </label>
        <div>
            <InputText width="10" @bind-Value="@Solicitud.PersonaId"></InputText>
            <ValidationMessage For="@(() => @Solicitud.PersonaId)" />
        </div>
       @*  <label>Tipo De Visa</label>
        <div>
            <InputText width="10" @bind-Value="@"></InputText>
            <ValidationMessage For="@(() => @TipoVisa.Tipo)" />
        </div>   *@ 
    </div>
    <button class="btn btn-primary" type="submit">Guardar <i class="bi bi-floppy2"></i></button>
    <button class="btn btn-info" type="reset">Limpiar <i class="bi bi-x-octagon"></i></button>
    <button class="btn btn-secondary" @onclick="ReturnAction">Regresar <i class="bi bi-arrow-clockwise"></i></button>

</EditForm>

@code {

    private EditContext editContext = null;
    protected override void OnInitialized()
    {
        editContext = new(Solicitud);
    }

    [EditorRequired]
    [Parameter]
    public Solicitud Solicitud { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; } = false;

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formularioFueEditado = editContext.IsModified();

        if (!formularioFueEditado)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var resultado = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });

        var confirmado = !string.IsNullOrEmpty(resultado.Value);

        if (confirmado)
        {
            return;
        }

        context.PreventNavigation();
    }
}
