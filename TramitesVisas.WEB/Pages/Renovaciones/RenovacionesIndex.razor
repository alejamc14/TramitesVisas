@page "/renovaciones"
@using CurrieTechnologies.Razor.SweetAlert2
@using TramitesVisas.Shared.Entidades
@using TramitesVisas.WEB.Repositories
@using TramitesVisas.WEB.Shared
@inject IRepository Repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager


<h3>Renovaciones</h3>
<div class="card">
    <div class="card-header">
        <span>
            <a class="btn btn-primary btn-sm float-start" href="/renovaciones/create"><i class="bi bi-plus-circle" /> Nueva Renovacion </a>

        </span>
    </div>

    <div class="card-body">
        <GenericList MyList="Renovaciones">

            <Body>
                <table class="table table-striped">
                    <thead>
                        <tr>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <b>Id</b>
                            </td>
                            <td>
                                <b>Fecha de renovacion </b>
                            </td>
                            <td>
                                <b>Costo</b>
                            </td>
                            <td>
                                <b>Descripcion</b>
                            </td>
                           
                        </tr>
                        @foreach (var renovacion in Renovaciones!)
                        {
                            <tr>
                                <td>
                                    @renovacion.Id
                                </td>
                                <td>
                                    @renovacion.FechaRenovacion
                                </td>
                                <td>
                                    @renovacion.Costo
                                </td>
                                <td>
                                    @renovacion.Descripcion
                                </td>                         
                                <td>
                                    <a href="/renovaciones/edit/@renovacion.Id" class="btn btn-warning">Editar<i class="bi bi-pencil-square"></i></a>
                                    <button class="btn btn-danger" @onclick=@(() => Delete(renovacion))>Borrar<i class="bi bi-trash3"></i></button>

                                </td>

                            </tr>
                        }
                    </tbody>
                </table>

            </Body>

        </GenericList>
    </div>
</div>


@code {

    public string nomsolicitud { get; set; }

    public List<Renovacion> Renovaciones { get; set; }

    public List<Solicitud> Solicitudes { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await Charging();
    }

    private async Task Charging()
    {
        var responseHttp = await Repository.GetAsync<List<Renovacion>>("/api/renovaciones");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        Renovaciones = responseHttp.Response;

        var response2HTTP = await Repository.GetAsync<List<Solicitud>>("/api/solicitudes");
        Solicitudes = response2HTTP.Response!;
    }


    private async Task Delete(Renovacion renovacion)
    {

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Realmente deseas eliminar la Renovacion: {renovacion.Id}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHTTP = await Repository.DeleteAsync($"/api/renovaciones/{renovacion.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/renovaciones");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Charging();

            var toast = sweetAlertService.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    ShowConfirmButton = true,
                    Timer = 3000,
                    Position = SweetAlertPosition.BottomEnd
                });
            await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Renovacion borrada con éxito.");
        }
    }
}

