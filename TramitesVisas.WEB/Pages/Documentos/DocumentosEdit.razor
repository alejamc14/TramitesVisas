@page "/documentos/edit/{DocumentoId:int}"
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService


<h3>Editar Documentos</h3>

@if (documento is null)
{
    <p>El Documento es Nulo</p>
}
else
{
    <DocumentosForm Documento="documento" OnValidSubmit="Editar" ReturnAction="Return"/>
    
}

@code {

    [Parameter]
    public int DocumetoId { get; set; }
    private Documento documento = new();

    protected override async Task OnInitializedAsync()
    {

        var responseHTTP = await repository.GetAsync<Documento>($"api/personas/{DocumetoId}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("documentos");
                return;
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
                return;
            }
        }
        else
        {
            documento = responseHTTP.Response;
        }
    }

    private async Task Editar()
    {

        var responseHTTP = await repository.PutAsync("api/documentos", documento);

        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {

            Return();
            var Toast = sweetAlertService.Mixin(new SweetAlertOptions
                {

                    Toast = true,
                    Position = SweetAlertPosition.BottomEnd,
                    ShowConfirmButton = true,
                    Timer = 3000

                });

            await Toast.FireAsync(icon: SweetAlertIcon.Success, message: "Documento modificada con exito");
        }

    }


    private void Return()
    {
        navigationManager.NavigateTo("documentos");
    }
   

    // protected override async Task OnInitializedAsync()
    // {

    //     var responseHTTP = await repository.GetAsync<Documento>($"api/documentos/{DocumentoId}");

    //     if (responseHTTP.Error)
    //     {
    //         if (responseHTTP.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
    //         {
    //             navigationManager.NavigateTo("documentos");
    //             return;
    //         }
    //         else
    //         {
    //             var mensajeError = await responseHTTP.GetErrorMessageAsync();
    //             await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
    //             return;
    //         }
    //     }
    //     else
    //     {
    //         documentos = responseHTTP.Response;
    //     }
    // }

    // private async Task Editar()
    // {

    //     var responseHTTP = await repository.PutAsync("api/Documentos", documento);

    //     if (responseHTTP.Error)
    //     {
    //         var mensajeError = await responseHTTP.GetErrorMessageAsync();
    //         await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
    //     }
    //     else

    //     {
    //         Return();
    //         var Toast = sweetAlertService.Mixin(new SweetAlertOptions
    //             {

    //                 Toast = true,
    //                 Position = SweetAlertPosition.BottomEnd,
    //                 ShowConfirmButton = true,
    //                 Timer = 3000

    //             });

    //         await Toast.FireAsync(icon: SweetAlertIcon.Success, message: "Documento modificado con exito");
    //     }
    // }



    // private void Return()
    // {

    //     navigationManager.NavigateTo("documentos");
    // }
}
