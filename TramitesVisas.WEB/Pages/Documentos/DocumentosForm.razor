@using CurrieTechnologies.Razor.SweetAlert2 
@using TramitesVisas.Shared.Entidades
@inject IRepository Repository
@inject SweetAlertService swal


<EditForm Model="Documento" OnValidSubmit="OnValidSubmit">

    <DataAnnotationsValidator />

     <div class="mb-3"> 
        <label>Nombre</label>
        <div>
            <InputText width="10" @bind-Value="@Documento.TipoDocumento"></InputText>
            <ValidationMessage For="@(() => Documento.TipoDocumento)" />
        </div>
    </div>


     <div class="mb-3">
            <label>Fecha Subida</label>
        <div>
            <InputDate width="10" @bind-Value="@Documento.FechaSubida"></InputDate>
            <ValidationMessage For="@(() => Documento.FechaSubida)" />
        </div>
    </div>

    <div class="mb-3">
        <label>URL</label>
        <div>
            <InputText width="10" @bind-Value="@Documento.URL"></InputText>
            <ValidationMessage For="@(() => Documento.URL)" />
        </div>
    </div>



    <div class="mb-3">
        <label>Solicitud Id</label>
        <div>
            <InputNumber width="10" @bind-Value="@Documento.SolicitudId"></InputNumber>
            <ValidationMessage For="@(() => Documento.SolicitudId)" />
        </div>
    </div> 




        
       @*  <div>
        <label>Solicitud</label>

            <Dropdown TItem="int" OnSelected="@OnSelected">
                <InitialTip>Escoja una Solicitud</InitialTip>
                <ChildContent >
                    @foreach (var solicitud in Solicitudes!)
                    {
                        <DropdownListItem Context="dropContext" Item="@solicitud.Id">@solicitud.TipoSolicitud</DropdownListItem>
                    }
                </ChildContent>
            </Dropdown>
         </div> 
        *@


    <button class="btn btn-primary" type="submit">Guardar <i class="bi bi-floppy2"></i></button>
    <button class="btn btn-info" type="reset">Limpiar <i class="bi bi-x-octagon"></i></button>
    <button class="btn btn-secondary" @onclick="ReturnAction">Regresar <i class="bi bi-arrow-clockwise"></i></button>

</EditForm>


@code {

    // public List<Solicitud> Solicitudes { get; set; }

    
    private EditContext editContext = null!;

    protected override void OnInitialized()
    {
        editContext = new(Documento);
    }


    [EditorRequired]
    [Parameter]
    public Documento Documento { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    //nuevo
    public bool FormPostedSuccessfully { get; set; } = false;

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formularioFueEditado = editContext.IsModified();

        if (!formularioFueEditado)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var resultado = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });

        var confirmado = !string.IsNullOrEmpty(resultado.Value);

        if (confirmado)
        {
            return;
        }

        context.PreventNavigation();
    }
    
    // private void OnSelected(int selection)
    // {
    //     Documento.SolicitudId = selection;
    // }



     // protected async override Task OnInitializedAsync()
     // {
     //     await Charging();
     // }

     // private async Task Charging()
     // {

     //     var responseHTTP = await Repository.GetAsync<List<Solicitud>>("/api/Solicitudes");
     //    Solicitudes = responseHTTP.Response!;

     // }
  



   

  
   
}