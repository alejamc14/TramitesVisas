@page "/documentos"
@using CurrieTechnologies.Razor.SweetAlert2
@using TramitesVisas.Shared.Entidades
@using TramitesVisas.WEB.Repositories
@using TramitesVisas.WEB.Shared
@inject IRepository Repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager



<h3>Documentos</h3>

<div class="card">
    <div class="card-header">
        <span>
           
            <a class="btn btn-primary btn-sm float-start" href="/documentos/create"><i class="bi bi-plus-circle" /> Nuevo Documento </a>

        </span>
    </div>
    <div class="card-body">
        <GenericList MyList="Documentos">

            <Body>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <b>Id</b>
                            </td>
                            <td>
                                <b>Tipo Documento</b>
                            </td>
                            <td>
                                <b>FechaSubida</b>
                            </td>
                            <td>
                                <b>URL</b>
                            </td>
                             <td>
                                <b>Solicitud</b>
                            </td>
                          
                        </tr> 
                        @foreach (var documento in Documentos!)
                        {
                             NomSolicitud(documento.SolicitudId);
                            
                            <tr>
                                <td>
                                    @documento.Id
                                </td>
                                <td>
                                    @documento.TipoDocumento
                                </td>
                                <td>
                                    @documento.FechaSubida
                                </td>
                                <td>
                                    @documento.URL
                                </td>
                                <td>
                                    @nomsolicitud
                                </td>
                              @*   <td>
                                    @GetSolicitudName(documento.SolicitudId)
                                </td> *@
                                <td>
                                    <a href="/personas/edit/@documento.Id" class="btn btn-warning"><i class="bi bi-pencil-square">Editar</i></a>
                                    <button class="btn btn-danger" @onclick=@(() => Delete(documento))><i class="bi bi-trash3">Borrar</i></button>

                                </td>

                            </tr>
                        }
                    </tbody>
                </table>

            </Body>

        </GenericList>
    </div>
</div>

@code {
    public string nomsolicitud { get; set; }

    public List<Documento> Documentos { get; set; }

    public List<Solicitud> Solicitudes { get; set; }


    protected async override Task OnInitializedAsync()
    {
        await Charging();
    }



    private async Task Charging()
    {
        var responseHttp = await Repository.GetAsync<List<Documento>>("/api/documentos");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        Documentos = responseHttp.Response;


        // var responseHTTP = await Repository.GetAsync<List<Documento>>("/api/documentos");
        // Documentos = responseHTTP.Response!;

        var response2HTTP = await Repository.GetAsync<List<Solicitud>>("/api/Solicitudes");
        Solicitudes = response2HTTP.Response!;
  
    }



    private async Task Delete(Documento documento)
    {

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Realmente deseas eliminar el documento: {documento.TipoDocumento}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHTTP = await Repository.DeleteAsync($"/api/documentos/{documento.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/documentos");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Charging();

            var toast = sweetAlertService.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    ShowConfirmButton = true,
                    Timer = 3000,
                    Position = SweetAlertPosition.BottomEnd
                });
           await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Documento borrado con éxito.");
        }
    }


    private void NomSolicitud(int? selection)
    {
        nomsolicitud = "";
        foreach (var solicitud in Solicitudes!)
        {
            if (selection == solicitud.Id)
            {
                nomsolicitud = solicitud.TipoSolicitud;
            }

        }
    }
}
